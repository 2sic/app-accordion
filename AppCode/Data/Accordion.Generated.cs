// DO NOT MODIFY THIS FILE - IT IS AUTO-GENERATED
// See also: https://go.2sxc.org/copilot-data
// To extend it, create a "Accordion.cs" with this contents:
/*
namespace AppCode.Data
{
  public partial class Accordion
  {
    // Add your own properties and methods here
  }
}
*/

// Generator:   CSharpDataModelsGenerator v17.06.02
// App/Edition: Accordion/
// User:        2sic Web-Developer
// When:        2024-04-05 08:58:24Z
using System.Collections.Generic;
using ToSic.Sxc.Data;

namespace AppCode.Data
{
  // This is a generated class for Accordion 
  // To extend/modify it, see instructions above.

  /// <summary>
  /// Accordion data. <br/>
  /// Generated 2024-04-05 08:58:24Z. Re-generate whenever you change the ContentType. <br/>
  /// <br/>
  /// Default properties such as `.Title` or `.Id` are provided in the base class. <br/>
  /// Most properties have a simple access, such as `.DesignedContent`. <br/>
  /// For other properties or uses, use methods such as
  /// .IsNotEmpty("FieldName"), .String("FieldName"), .Children(...), .Picture(...), .Html(...).
  /// </summary>
  public partial class Accordion: AutoGenerated.ZagAccordion
  {  }
}

namespace AppCode.Data.AutoGenerated
{
  /// <summary>
  /// Auto-Generated base class for Default.Accordion in separate namespace and special name to avoid accidental use.
  /// </summary>
  public abstract class ZagAccordion: Custom.Data.CustomItem
  {
    /// <summary>
    /// DesignedContent as list of ITypedItem.
    /// </summary>
    /// <remarks>
    /// Generated to return child-list child because field settings had Multi-Value=true. 
    /// </remarks>
    /// <returns>
    /// An IEnumerable of specified type, but can be empty.
    /// </returns>
    public IEnumerable<ITypedItem> DesignedContent => _designedContent ??= _item.Children("DesignedContent");
    private IEnumerable<ITypedItem> _designedContent;

    /// <summary>
    /// Icon as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Icon", scrubHtml: true) etc.
    /// </summary>
    public string Icon => _item.String("Icon", fallback: "");

    /// <summary>
    /// InitiallyExpanded as bool. <br/>
    /// To get nullable use .Get("InitiallyExpanded") as bool?;
    /// </summary>
    public bool InitiallyExpanded => _item.Bool("InitiallyExpanded");

    /// <summary>
    /// Title as string. <br/>
    /// For advanced manipulation like scrubHtml, use .String("Title", scrubHtml: true) etc.
    /// </summary>
    /// <remarks>
    /// This hides base property Title.
    /// To access original, convert using AsItem(...) or cast to ITypedItem.
    /// Consider renaming this field in the underlying content-type.
    /// </remarks>
    public new string Title => _item.String("Title", fallback: "");
  }
}